package jhlee;

import java.io.*;
import java.util.*;
import java.sql.*;

import java.lang.Math;

import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.io.compress.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.*;

public class SimilarityJoin {

	/*
	 * Map class part
	 */

	public static class MapClass1 extends Mapper<Object, Text, Text, Text> {

		private final int dim = 2;
		private final int nchunk = 4;

		private Text emitkey = new Text ();
		private Text emitval = new Text ();

		// Text : input line
		// --> format = <point id> \tab <dimension 1> \tab <dimension 2>
		public void map (Object key, Text value, Context context) throws IOException, InterruptedException
		{
			String arr[] = value.toString().split ("\t", 2);

			// read data from a line
			int pid = Integer.parseInt (arr[0]);

			// get partition id
			int cid = pid % nchunk;

			// set value
			emitval.set (value.toString());

			// emit key-value pairs
			/*
			 * fill blank
			 * HINT: call ''emitkey.set ("" + ? + "\t" + ?);''
			 */
			// -------------------------------------------
			// -------------------------------------------
		}
	}


	/*
	 * Reduce class part
	 */


	public static class ReduceClass1 extends Reducer<Text, Text, Text, Text> {

		private final int dim = 2;
		private final int nchunk = 4;
		private float threshold;

		private Text emitkey = new Text ();
		private Text emitval = new Text ();

		private double[] p1 = null;
		private double[] p2 = null;

		public void setup (Reducer.Context context)
		{
			Configuration conf = context.getConfiguration ();

			threshold = conf.getFloat ("threshold", -1);

			p1 = new double[dim];
			p2 = new double[dim];
		}

		public void reduce(Text key, Iterable<Text> values, Context context) 
			throws IOException, InterruptedException
		{

			String[] keyarr = key.toString().split ("\t");

			double d;
			int cid1 = Integer.parseInt (keyarr[0]);
			int cid2 = Integer.parseInt (keyarr[1]);

			Vector <String> vecs1 = new Vector <String> ();
			Vector <String> vecs2 = new Vector <String> ();

			if (cid1 == cid2) {
				// get all data points
				for (Text p: values) {
					// add to matrix
					vecs1.add (p.toString());
				}

				// fill the blank
				// --------------------------------------
				// --------------------------------------
			}
			else {
				// get all data points
				for (Text p: values) {
					String[] arr = p.toString().split("\t", 2);
					int tmp = Integer.parseInt (arr[0]);

					if (tmp % nchunk == cid1) {
						vecs1.add (p.toString());
					}
					else {
						vecs2.add (p.toString());
					}
				}

				// fill the blank
				// --------------------------------------
				//-----------------------------------------

			}

			vecs1.clear ();
			vecs2.clear ();
		}

		public double dist (int dim, String sp1, String sp2) {
			// parse string
			String[] strarr = sp1.split ("\t");
			for (int i=1; i<strarr.length; i++) {
				p1[i-1] = Double.parseDouble (strarr[i]);
			}

			strarr = sp2.split ("\t");
			for (int i=1; i<strarr.length; i++) {
				p2[i-1] = Double.parseDouble (strarr[i]);
			}

			// compute dist
			double diff, sum = 0.;
			for (int i=0; i<dim; i++) {
				diff = p1[i] - p2[i];
				sum += diff * diff;
			}
			return Math.sqrt(sum);
		}
	}

	public static void main(String[] args) throws IOException, InterruptedException, ClassNotFoundException {
		Configuration conf = new Configuration ();
    	String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
		if (otherArgs.length != 3) {
			System.out.println ("usage: <threshold> <in> <out>");
			System.exit(1);
		}

		conf.setFloat ("threshold", (float)Double.parseDouble(otherArgs[0]));

		Job job = new Job (conf, "bruteforce");
		job.setJarByClass(SimilarityJoin.class);

		job.setNumReduceTasks (1);

		job.setMapperClass(MapClass1.class);
		job.setReducerClass(ReduceClass1.class);

		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);

		FileInputFormat.addInputPath(job, new Path(otherArgs[1]));
		FileOutputFormat.setOutputPath(job, new Path(otherArgs[2]));

		if (! job.waitForCompletion(true))
			System.exit (1);
	}
}

